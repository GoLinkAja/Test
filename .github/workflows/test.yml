name: MiHomo-Create
on:
  - workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jobs:
          - { goos: linux, goarch: arm64, output: arm64 }
          - { goos: linux, goarch: arm, goarm: '7', output: armv7 }
          - { goos: android, goarch: arm, ndk: armv7a-linux-androideabi34, output: armv7 }
          - { goos: android, goarch: arm64, ndk: aarch64-linux-android34, output: arm64-v8 }
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/mihomo
          ref: Alpha
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get Latest Tag
        id: latest_tag
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: MetaCubeX/mihomo
          excludes: prerelease, draft
          
      - name: Set Time and Build Variables
        run: |
          sudo timedatectl set-timezone "Asia/Jakarta"
          echo "NAME=mihomo" >> $GITHUB_ENV
          echo "BUILDTIME=$(date)" >> $GITHUB_ENV
          echo "CGO_ENABLED=0" >> $GITHUB_ENV
          HASH_COMMIT=$(git rev-parse --short HEAD)
          echo "URL_COMMIT=https://www.github.com/metacubex/mihomo/commit/$HASH_COMMIT" >> $GITHUB_ENV
          VERSION=${{ steps.latest_tag.outputs.release }}-${HASH_COMMIT}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAGS=with_gvisor,with_low_memory" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=$(date)' -w -s -buildid=" >> $GITHUB_ENV
      
      - name: Setup NDK for Android
        if: ${{ matrix.jobs.goos == 'android' }}
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28-beta1
          
      - name: Set NDK Path and Enable CGO
        if: ${{ matrix.jobs.goos == 'android' }}
        run: |
          echo "CC=${{steps.setup-ndk.outputs.ndk-path}}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{matrix.jobs.ndk}}-clang" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

      - name: Build Application
        env:
          GOOS: ${{matrix.jobs.goos}}
          GOARCH: ${{matrix.jobs.goarch}}
          GOARM: ${{matrix.jobs.goarm}}
          GOOUTPUT: ${{matrix.jobs.output}}
        run: |
          echo "Building for ${GOOS}/${GOARCH}..."
          go env
          go build -tags "${TAGS}" -trimpath -ldflags "${LDFLAGS}" -o ./${NAME}
          echo "Build command: go build -tags '${TAGS}' -trimpath -ldflags '${LDFLAGS}' -o './${NAME}'"
      
      - name: Archive Build Output
        id: archive
        env:
          NAME: ${{ env.NAME }}
          GOOS: ${{ matrix.jobs.goos }}
          GOOUTPUT: ${{ matrix.jobs.output }}
          VERSION: ${{ env.VERSION }}
        run: |
          ARCHIVE_NAME="${NAME}-${GOOS}-${GOOUTPUT}-${VERSION}.tgz"
          echo "Creating archive: ${ARCHIVE_NAME}"
          tar -caf $ARCHIVE_NAME ./${NAME}
          echo "gz=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          SHA256=$(sha256sum $ARCHIVE_NAME | cut -d ' ' -f1)
          echo "sha=$SHA256" >> $GITHUB_OUTPUT

      - name: Setup jq
        uses: dcarbone/install-jq-action@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.gz }}
          asset_name: ${{ steps.archive.outputs.gz }}
          asset_content_type: application/gzip
